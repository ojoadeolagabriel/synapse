import org.apache.commons.collections4.Bag
import org.apache.commons.collections4.bag.HashBag
import org.joda.time.DateTime
import org.joda.time.DateTimeZone

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'commons-codec', name: 'commons-codec', version: '1.2'
        classpath group: 'org.apache.commons', name: 'commons-collections4', version: '4.2'
        classpath group: 'joda-time', name: 'joda-time', version: '2.10'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
    }
}

plugins {
    id 'groovy'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group 'com.transferwise'
    version '1.0-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

dependencies {
    compile group: 'joda-time', name: 'joda-time', version: '2.10'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.17'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.2'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    compile("org.springframework.boot:spring-boot-starter-web")

    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task encode {
    doFirst {
        Bag bag = new HashBag()
        bag.add("xxx", 6)
        System.out.println ("" + DateTime.now(DateTimeZone.UTC) +  " as time")
    }
}

def mySpecialProjects = subprojects.findAll {
    item -> item.name.contains("syn")
}

println project(':synapse-data').name + " ... was detected!"
gradle.taskGraph.whenReady() {
    System.out.println mySpecialProjects.size() + " was found in $project.name"
}

task init (dependsOn: build) {
    group 'Optimus'
    description 'Build the doFirst'

    doFirst {
        println("we are online... root proj: $project.name and  $name")
    }
}

tasks.whenTaskAdded { task ->
    task.ext.srcDir = 'src/main/java'
}

task triggerNemesis(type: CustomTask){
    greeting = "nemesis..."
}


class CustomTask extends DefaultTask{
    String greeting

    @TaskAction
    def process(){
        logger.info("tttttttttttttttttttttt")
        println("custom task woooooooooooozer: $greeting")
    }
}

task zipOutPut(type: Zip){
    from '/tendon'
    include '*'
    include '*/*'
    archiveName "tw-pluggins.zip"
    destinationDir(file('c://zipper-x/'))

    doLast {
        println ("app_name: $applicationNameX")
    }
}

task cleanSubProjects {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}